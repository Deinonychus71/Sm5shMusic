<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
              xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             xmlns:fields="clr-namespace:Sma5hMusic.GUI.Views.Fields"
             x:Class="Sma5hMusic.GUI.Views.PlaylistView">
  <Grid ColumnDefinitions="3*,5,4*" RowDefinitions="30,*">
    <ContentControl Grid.Row="0" Grid.Column="0" Content="{Binding VMContextMenu}"></ContentControl>
    <Grid Grid.Row="1" Grid.Column="0" Classes="list">
      <DataGrid Classes="bgmList" SelectionMode="Extended" Items="{Binding Bgms, Mode=OneWay}">
        <i:Interaction.Behaviors>
          <ia:EventTriggerBehavior EventName="Initialized">
            <ia:InvokeCommandAction Command="{Binding ActionInitializeDragAndDropBgm, Mode=OneWay}" CommandParameter="{Binding $self}"/>
          </ia:EventTriggerBehavior>
          <ia:EventTriggerBehavior EventName="CellPointerPressed">
            <ia:InvokeCommandAction Command="{Binding ActionSendToPlaylist}"/>
          </ia:EventTriggerBehavior>
        </i:Interaction.Behaviors>
        <DataGrid.Columns>
          <DataGridTemplateColumn CanUserResize="false" Width="40">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <ContentControl IsVisible="{Binding DoesFileExist, Mode=OneWay}" Content="{Binding MusicPlayer, Mode=OneWay}"/>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn Width="2*" Header="Game">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <TextBlock Margin="{StaticResource DataGridTextColumnCellTextBlockMargin}" VerticalAlignment="Center"
                           Foreground="{Binding TestDispOrder, Converter={StaticResource HiddenColumnConverter}}" Text="{Binding GameTitleViewModel.Title, Mode=OneWay}"></TextBlock>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn Width="3*" Header="Title">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <TextBlock Margin="{StaticResource DataGridTextColumnCellTextBlockMargin}" VerticalAlignment="Center"
                           Foreground="{Binding TestDispOrder, Converter={StaticResource HiddenColumnConverter}}" Text="{Binding Title, Mode=OneWay, Converter={StaticResource LabelValueConverter}}"></TextBlock>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
        </DataGrid.Columns>
      </DataGrid>
    </Grid>
    <GridSplitter Grid.Row="1" Grid.Column="1" ResizeDirection="Columns"/>
    <DockPanel Grid.Row="0" Grid.Column="2">
      <Menu DockPanel.Dock="Left">
        <MenuItem Header="{Binding WhenStageSelected^.Title, FallbackValue='Select a stage...'}" Items="{Binding Stages}">
          <MenuItem.Styles>
            <Style Selector="MenuItem > MenuItem">
              <Setter Property="Header" Value="{Binding Title}"/>
              <Setter Property="Command" Value="{Binding $parent[Grid].DataContext.ActionSelectStage}"/>
              <Setter Property="CommandParameter" Value="{Binding .}"/>
            </Style>
          </MenuItem.Styles>
        </MenuItem>
        <MenuItem Header="Manage...">
          <MenuItem Header="Create new playlist" Command="{Binding ActionCreatePlaylist}"/>
          <MenuItem Header="Edit playlist" Command="{Binding ActionEditPlaylist}"/>
          <MenuItem Header="Delete playlist" Command="{Binding ActionDeletePlaylist}"/>
          <Separator/>
          <MenuItem Header="Pick playlist (advanced)">
            <MenuItem Header="{Binding WhenPlaylistSelected^.Title, FallbackValue='Select a playlist...'}" Items="{Binding Playlists}">
              <MenuItem.Styles>
                <Style Selector="MenuItem > MenuItem">
                  <Setter Property="Header" Value="{Binding Title}"/>
                  <Setter Property="Command" Value="{Binding $parent[Grid].DataContext.ActionSelectPlaylist}"/>
                  <Setter Property="CommandParameter" Value="{Binding .}"/>
                </Style>
              </MenuItem.Styles>
            </MenuItem>
            <MenuItem Header="{Binding WhenPlaylistOrderSelected^.Label, FallbackValue='Select an order...'}" Items="{Binding OrderMenu}">
              <MenuItem.Styles>
                <Style Selector="MenuItem > MenuItem">
                  <Setter Property="Header" Value="{Binding Label}"/>
                  <Setter Property="Command" Value="{Binding $parent[Grid].DataContext.ActionSelectPlaylistOrder}"/>
                  <Setter Property="CommandParameter" Value="{Binding .}"/>
                </Style>
              </MenuItem.Styles>
            </MenuItem>
          </MenuItem>
          <Separator/>
          <MenuItem Header="Assign a Stage to playlist" Command="{Binding ActionAssignPlaylistToStage}"/>
        </MenuItem>
      </Menu>
      <TextBlock HorizontalAlignment="Right" Padding="0,0,20,0" VerticalAlignment="Center" DockPanel.Dock="Right" Text="{Binding NbrBgmsPlaylist}"/>
    </DockPanel>
    <Grid Grid.Row="1" Grid.Column="2" Classes="list" Margin="0,0,20,0">
      <DataGrid Background="Transparent" SelectionMode="Extended" DragDrop.AllowDrop="True" Classes="bgmList" SelectedItem="{Binding SelectedPlaylistValueEntry, Mode=TwoWay}" Items="{Binding SelectedPlaylistOrderedEntry}">
        <i:Interaction.Behaviors>
          <ia:EventTriggerBehavior EventName="CellPointerPressed">
            <ia:InvokeCommandAction Command="{Binding ActionReorderPlaylist}"/>
          </ia:EventTriggerBehavior>
          <ia:EventTriggerBehavior EventName="Initialized">
            <ia:InvokeCommandAction Command="{Binding ActionInitializeDragAndDrop, Mode=OneWay}" CommandParameter="{Binding $self}"/>
          </ia:EventTriggerBehavior>
        </i:Interaction.Behaviors>
        <DataGrid.Columns>
          <DataGridTemplateColumn CanUserResize="false" Width="36">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <Button Width="30" IsEnabled="False" Margin="3,0,3,0" Content="&#8597;" HorizontalContentAlignment="Center" FontFamily="Segoe UI Symbol" />
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn CanUserResize="false" Width="40">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <ContentControl IsVisible="{Binding BgmReference.DoesFileExist, Mode=OneWay}"  Content="{Binding BgmReference.MusicPlayer, Mode=OneWay}"/>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn Width="2*" Header="Game">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <TextBlock Background="Transparent" Margin="{StaticResource DataGridTextColumnCellTextBlockMargin}" VerticalAlignment="Center"
                           Foreground="{Binding Order, Converter={StaticResource HiddenColumnConverter}}" Text="{Binding BgmReference.GameTitleViewModel.Title, Mode=OneWay}">
                  <TextBlock.ContextMenu>
                    <ContextMenu IsVisible="{Binding IsMod}">
                      <MenuItem Header="Set exact incidence value..." Command="{Binding $parent[DataGrid].DataContext.ActionSetIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <Separator/>
                      <MenuItem Header="Copy incidence" Command="{Binding $parent[DataGrid].DataContext.ActionCopyIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <MenuItem Header="Paste incidence" IsEnabled="{Binding $parent[DataGrid].DataContext.CopyValueExists}" Command="{Binding $parent[DataGrid].DataContext.ActionPasteIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <MenuItem Header="Paste incidence to all other Orders" IsEnabled="{Binding $parent[DataGrid].DataContext.CopyValueExists}" Command="{Binding $parent[DataGrid].DataContext.ActionPasteIncidenceAll, Mode=OneWay}" CommandParameter="{Binding}"/>
                    </ContextMenu>
                  </TextBlock.ContextMenu>
                </TextBlock>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn Width="3*" Header="Title">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <TextBlock Background="Transparent" Margin="{StaticResource DataGridTextColumnCellTextBlockMargin}" VerticalAlignment="Center"
                           Foreground="{Binding Order, Converter={StaticResource HiddenColumnConverter}}" Text="{Binding BgmReference.Title, Mode=OneWay, Converter={StaticResource LabelValueConverter}}">
                  <TextBlock.ContextMenu>
                    <ContextMenu IsVisible="{Binding IsMod}">
                      <MenuItem Header="Set exact incidence value..." Command="{Binding $parent[DataGrid].DataContext.ActionSetIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <Separator/>
                      <MenuItem Header="Copy incidence" Command="{Binding $parent[DataGrid].DataContext.ActionCopyIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <MenuItem Header="Paste incidence" IsEnabled="{Binding $parent[DataGrid].DataContext.CopyValueExists}" Command="{Binding $parent[DataGrid].DataContext.ActionPasteIncidence, Mode=OneWay}" CommandParameter="{Binding}"/>
                      <MenuItem Header="Paste incidence to all other Orders" IsEnabled="{Binding $parent[DataGrid].DataContext.CopyValueExists}" Command="{Binding $parent[DataGrid].DataContext.ActionPasteIncidenceAll, Mode=OneWay}" CommandParameter="{Binding}"/>
                    </ContextMenu>
                  </TextBlock.ContextMenu>
                </TextBlock>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn MinWidth="200" Header="Incidence">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <Slider Padding="0,-15,0,-15" Height="30"  TickFrequency="100" Minimum="0" Maximum="10000" Value="{Binding Incidence, Mode=TwoWay}"/>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTemplateColumn Header="Actions" CanUserResize="false" Width="80">
            <DataGridTemplateColumn.CellTemplate>
              <DataTemplate>
                <StackPanel Orientation="Horizontal">
                  <Button Width="40" FontFamily="Segoe UI Symbol" HorizontalContentAlignment="Center" Content="&#x1F441;" Command="{Binding $parent[DataGrid].DataContext.ActionHidePlaylistItem, Mode=OneWay}" CommandParameter="{Binding}"/>
                  <Button Width="40" FontFamily="Segoe UI Symbol" HorizontalContentAlignment="Center" Content="&#x274C;" Command="{Binding $parent[DataGrid].DataContext.ActionDeletePlaylistItem, Mode=OneWay}" CommandParameter="{Binding}"/>
                </StackPanel>
              </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
          </DataGridTemplateColumn>
          <DataGridTextColumn Width="16" />
        </DataGrid.Columns>
      </DataGrid>
    </Grid>
  </Grid>
</UserControl>
